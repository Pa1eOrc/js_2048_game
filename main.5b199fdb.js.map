{"version":3,"sources":["scripts/main.js"],"names":["gameContainer","document","querySelector","startButton","cells","querySelectorAll","messageStart","messageWin","messageLose","gameScore","gameRow","probabilityGeneratingNumber","numberFour","numberTwo","moveLeft","moveRight","moveUp","moveDown","winnerNumber","textContent","movePossible","adjacentCells","generateRandom","emptyCells","filter","cell","length","randomI","randomCell","Math","floor","random","randomNum","classList","add","updateCells","forEach","className","filterZero","cellsArray","i","slide","finalArray","arrayToSlide","updatedScore","map","value","push","parseInt","slideLeft","row","rowCells","updatedArray","td","index","slideRight","reverse","slideUp","Array","from","childElementCount","_","columnIndex","columnCells","children","rowIndex","currentCellContent","updatedCellContent","slideDown","checkGameWin","some","remove","checkGameOver","currentCell","rightCell","bottomCell","addEventListener","contains","e","key"],"mappings":"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","file":"main.5b199fdb.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst gameContainer = document.querySelector('.container');\nconst startButton = gameContainer.querySelector('.button');\nconst cells = gameContainer.querySelectorAll('.field-cell');\nconst messageStart = gameContainer.querySelector('.message-start');\nconst messageWin = gameContainer.querySelector('.message-win');\nconst messageLose = gameContainer.querySelector('.message-lose');\nconst gameScore = gameContainer.querySelector('.game-score');\nconst gameRow = gameContainer.querySelectorAll('tr');\nconst probabilityGeneratingNumber = 0.1;\nconst numberFour = 4;\nconst numberTwo = 2;\nconst moveLeft = 'ArrowLeft';\nconst moveRight = 'ArrowRight';\nconst moveUp = 'ArrowUp';\nconst moveDown = 'ArrowDown';\nconst winnerNumber = document.querySelector('h1').textContent;\nlet movePossible = false;\nlet adjacentCells = false;\n\nfunction generateRandom() {\n  const emptyCells = [...cells].filter(cell => cell.textContent === '');\n\n  if (emptyCells.length === 0) {\n    return;\n  }\n\n  const randomI = Math.floor(Math.random() * emptyCells.length);\n  const randomCell = emptyCells[randomI];\n  const randomNum = Math.random() < probabilityGeneratingNumber\n    ? numberFour : numberTwo;\n\n  randomCell.textContent = randomNum;\n  randomCell.classList.add(`field-cell--${randomNum}`);\n}\n\nstartButton.addEventListener('click', () => {\n  if (startButton.classList.contains('start')) {\n    generateRandom();\n    generateRandom();\n    messageStart.classList.add('hidden');\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    startButton.textContent = 'Restart';\n  } else {\n    cells.forEach((cell) => {\n      cell.textContent = '';\n      cell.className = 'field-cell';\n    });\n    messageStart.classList.remove('hidden');\n    startButton.classList.remove('restart');\n    startButton.classList.add('start');\n    startButton.textContent = 'Start';\n    gameScore.textContent = '0';\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n  }\n});\n\nfunction updateCells() {\n  cells.forEach((cell) => {\n    if (cell.textContent === '') {\n      cell.className = 'field-cell';\n    } else {\n      cell.className = `field-cell field-cell--${cell.textContent}`;\n    }\n  });\n}\n\ndocument.addEventListener('keydown', (e) => {\n  switch (e.key) {\n    case moveLeft:\n      slideLeft();\n      break;\n\n    case moveRight:\n      slideRight();\n      break;\n\n    case moveUp:\n      slideUp();\n      break;\n\n    case moveDown:\n      slideDown();\n      break;\n  }\n\n  checkGameWin();\n  checkGameOver();\n});\n\nfunction filterZero(cellsArray) {\n  return cellsArray.filter(i => i !== '');\n}\n\nfunction slide(cellsArray) {\n  const arrayToSlide = filterZero(cellsArray);\n  let updatedScore = 0;\n\n  const newArray = arrayToSlide.map((value, i) => {\n    if (value === arrayToSlide[i + 1]) {\n      updatedScore += value * 2;\n      arrayToSlide[i + 1] = '';\n\n      return value * 2;\n    } else {\n      return value;\n    }\n  });\n\n  const finalArray = filterZero(newArray);\n\n  while (finalArray.length < cellsArray.length) {\n    finalArray.push('');\n  }\n\n  gameScore.textContent = parseInt(gameScore.textContent) + updatedScore;\n\n  return finalArray;\n}\n\nfunction slideLeft() {\n  movePossible = false;\n\n  gameRow.forEach((row) => {\n    const rowCells = row.querySelectorAll('td');\n    const cellsArray = [...rowCells].map(td => td.textContent);\n    const updatedArray = slide(cellsArray);\n\n    rowCells.forEach((td, index) => {\n      if (td.textContent !== updatedArray[index]) {\n        movePossible = true;\n      }\n      td.textContent = updatedArray[index];\n    });\n  });\n\n  if (movePossible) {\n    updateCells();\n    generateRandom();\n  }\n}\n\nfunction slideRight() {\n  movePossible = false;\n\n  gameRow.forEach((row) => {\n    const rowCells = row.querySelectorAll('td');\n    const cellsArray = [...rowCells].map(td => td.textContent);\n\n    cellsArray.reverse();\n\n    const updatedArray = slide(cellsArray);\n\n    updatedArray.reverse();\n\n    rowCells.forEach((td, index) => {\n      if (td.textContent !== updatedArray[index]) {\n        movePossible = true;\n      }\n      td.textContent = updatedArray[index];\n    });\n  });\n\n  if (movePossible) {\n    updateCells();\n    generateRandom();\n  }\n}\n\nfunction slideUp() {\n  movePossible = false;\n\n  Array.from({ length: gameRow[0].childElementCount }).forEach(\n    (_, columnIndex) => {\n      const columnCells = Array.from(gameRow).map(\n        row => row.children[columnIndex].textContent);\n\n      const updatedArray = slide(columnCells);\n\n      gameRow.forEach((row, rowIndex) => {\n        const currentCellContent = row.children[columnIndex].textContent;\n        const updatedCellContent = updatedArray[rowIndex];\n\n        if (currentCellContent !== updatedCellContent) {\n          movePossible = true;\n        }\n\n        row.children[columnIndex].textContent = updatedCellContent;\n      });\n    });\n\n  if (movePossible) {\n    updateCells();\n    generateRandom();\n  }\n}\n\nfunction slideDown() {\n  movePossible = false;\n\n  Array.from({ length: gameRow[0].childElementCount }).forEach(\n    (_, columnIndex) => {\n      const columnCells = Array.from(gameRow).map(\n        row => row.children[columnIndex].textContent);\n\n      columnCells.reverse();\n\n      const updatedArray = slide(columnCells);\n\n      updatedArray.reverse();\n\n      gameRow.forEach((row, rowIndex) => {\n        const currentCellContent = row.children[columnIndex].textContent;\n        const updatedCellContent = updatedArray[rowIndex];\n\n        if (currentCellContent !== updatedCellContent) {\n          movePossible = true;\n        }\n\n        row.children[columnIndex].textContent = updatedCellContent;\n      });\n    });\n\n  if (movePossible) {\n    updateCells();\n    generateRandom();\n  }\n}\n\nfunction checkGameWin() {\n  const winCell = Array.from(cells).some(\n    cell => cell.textContent === winnerNumber);\n\n  if (winCell) {\n    messageWin.classList.remove('hidden');\n  }\n}\n\nfunction checkGameOver() {\n  const emptyCells = Array.from(cells).some(cell => cell.textContent === '');\n\n  adjacentCells = false;\n\n  gameRow.forEach((row, rowIndex) => {\n    const rowCells = row.querySelectorAll('td');\n    const cellsArray = [...rowCells].map(td => td.textContent);\n\n    cellsArray.forEach((currentCell, i) => {\n      const rightCell = cellsArray[i + 1];\n      const bottomCell = rowIndex < gameRow.length - 1\n        ? gameRow[rowIndex + 1].children[i].textContent\n        : null;\n\n      const isRightCellSame = rightCell && currentCell === rightCell;\n      const isBottomCellSame = bottomCell && currentCell === bottomCell;\n\n      if (isRightCellSame || isBottomCellSame) {\n        adjacentCells = true;\n      }\n    });\n  });\n\n  if (!emptyCells && !adjacentCells) {\n    messageLose.classList.remove('hidden');\n  }\n}\n"]}